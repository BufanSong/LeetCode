HW5. Tree Traversal
Date:June 12 2019
Bufan Song
---------------------------------------------------------------------------------------------------------------------------
Q1:
---------------------------------------------------------------------------------------------------------------------------
94. Binary Tree Inorder Traversal
Given a binary tree, return the inorder traversal of its nodes' values.
---------------------------------------------------------------------------------------------------------------------------
Recursion Sol:
class Solution {
    
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
    public void helper(TreeNode node, List<Integer> list){
        if (node != null){
            helper(node.left, list);
            list.add(node.val);
            helper(node.right, list);
        }
    }
}

Iterative Sol:
Thoughts: Use stack, while has left child, push it into stack. If no longer has left child, pop the node in the stack out,
adding the lefest node.val into result, and then search the right child, which let node = node.right; 

public List<Integer> inorderTraversal(TreeNode root){
        List<Integer> res = new ArrayList<>();
        if (root == null)
            return res;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode node = root;
        while (node != null || !stack.isEmpty()){
            while (node != null){
                stack.push(node);
                node = node.left;
            }
            node = stack.pop();
            res.add(node.val);
            node = node.right;
        }
        return res;
}

---------------------------------------------------------------------------------------------------------------------------
Q2:
---------------------------------------------------------------------------------------------------------------------------
144. Binary Tree Preorder Traversal
Given a binary tree, return the preorder traversal of its nodes' values.
---------------------------------------------------------------------------------------------------------------------------
Recursion Sol:
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
    public void helper(TreeNode node, List<Integer> list){
        if (node != null){
            list.add(node.val);
            helper(node.left, list);
            helper(node.right, list);
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------
Iterative Sol:
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode node = root;
        
        while (node != null || !stack.isEmpty()){
            while(node != null){
                stack.push(node);
                res.add(node.val);
                node = node.left;
            }
            node = stack.pop();
            node = node.right;
        }
        return res;
    }
}

---------------------------------------------------------------------------------------------------------------------------
Q3:
---------------------------------------------------------------------------------------------------------------------------
145. Binary Tree Postorder Traversal
Given a binary tree, return the postorder traversal of its nodes' values.
---------------------------------------------------------------------------------------------------------------------------
Recursion Sol:
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
    public void helper(TreeNode node, List<Integer> list){
        if (node != null){
            helper(node.left, list);
            helper(node.right, list);
            list.add(node.val);
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------
Iterative Sol:
Thouths: Inverse the pre-order process, insead of root->left> right, become root->right->left, and reverse the final result. 
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode node = root;
        while (!stack.isEmpty() || node != null){
            if (node != null){
                stack.push(node);
                res.add(0, node.val);
                node = node.right;
            }
            else{
                node = stack.pop();
                node = node.left;
            }
        }
        return res;
    }
}

---------------------------------------------------------------------------------------------------------------------------
Q4:
---------------------------------------------------------------------------------------------------------------------------
314. Binary Tree Vertical Order Traversal
Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.
---------------------------------------------------------------------------------------------------------------------------
Thoughts:
Create two maps, one to record <position, List<node.val>>, one to record <TreeNode, position>. When BFS to tree,
left child has the position -1, right child has the position +1, and get the list of that position, add the node value
into the list. When traversed the tree, create a priorityqueue, sort the <position, List<node.val>> map in ascending
order based on map.getKey, and poll out the set value, add the list into final results.
---------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        Map<Integer, List<Integer>> posNodeMap = new HashMap<>();
        Map<TreeNode, Integer> nodePosMap = new HashMap<>();
        nodePosMap.put(root, 0);
        Queue<TreeNode> bfsQueue = new LinkedList<>();
        bfsQueue.add(root);
        
        while (!bfsQueue.isEmpty()){
            int size = bfsQueue.size();
            for (int i = 0; i < size; i++){
                TreeNode node = bfsQueue.poll();
                int position = nodePosMap.get(node);
                if (!posNodeMap.containsKey(position)){
                    List<Integer> list = new ArrayList<>();
                    list.add(node.val);
                    posNodeMap.put(position, list);
                }
                else{
                    List<Integer> list = posNodeMap.get(position);
                    list.add(node.val);
                    posNodeMap.put(position, list);
                }
                
                if (node.left != null){
                    bfsQueue.add(node.left);
                    nodePosMap.put(node.left, position - 1);
                }
                if (node.right != null){
                    bfsQueue.add(node.right);
                    nodePosMap.put(node.right, position + 1);
                }
            }
        }
        PriorityQueue<Map.Entry<Integer, List<Integer>>> pq = new PriorityQueue<>((a,b) -> a.getKey() - b.getKey());
        pq.addAll(posNodeMap.entrySet());
        
        while (!pq.isEmpty()){
            res.add(pq.poll().getValue());
        }
        return res;
    }
}
Updated Result:
Instead of using second map to record TreeNode, position, use another queue. And add two variables (int min, max) to record the
range of position. After traversed the tree, using one for loop from min to max to get all the list results and all to final res. 
Improve the time complexity from 6.06% to 94.71%, and space complexity form 94% to 100%. 

public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        Map<Integer, List<Integer>> posNodeMap = new HashMap<>();
        Queue<TreeNode> bfsQueue = new LinkedList<>();
        bfsQueue.add(root);
        Queue<Integer> posMap = new LinkedList<>();
        posMap.add(0);
        int max = 0;
        int min = 0;
        while (!bfsQueue.isEmpty()){
            int size = bfsQueue.size();
            for (int i = 0; i < size; i++){
                TreeNode node = bfsQueue.poll();
                int position = posMap.poll();
                if (!posNodeMap.containsKey(position)){
                    List<Integer> list = new ArrayList<>();
                    list.add(node.val);
                    posNodeMap.put(position, list);
                }
                else{
                    List<Integer> list = posNodeMap.get(position);
                    list.add(node.val);
                    posNodeMap.put(position, list);
                }
                
                if (node.left != null){
                    bfsQueue.add(node.left);
                    posMap.add(position - 1);
                    min = Math.min(min, position - 1);
                }
                if (node.right != null){
                    bfsQueue.add(node.right);
                    posMap.add(position + 1);
                    max = Math.max(max, position + 1);
                }
            }
        }
        for (int i = min; i <= max; i++){
            res.add(posNodeMap.get(i));
        }
        return res;
    }
