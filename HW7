HW7 Disjiont Set
Date: June 19 2019
Bufan Song
---------------------------------------------------------------------------------------------------------------------------------------------
Q1: 
305. Number of Islands II
A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:
Input: m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]
Output: [1,1,2,3]
---------------------------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    int[][] dirs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List <Integer> res = new ArrayList<>();
        if (m <= 0 || n <= 0) return res;
        
        int count = 0;
        int[]roots = new int [m * n];
        Arrays.fill(roots, -1);
        
        for (int[] p : positions){
            int root = n * p[0] + p[1];
            if (roots[root] != -1){
                res.add(count);
                continue;   
            }
            roots[root] = root;
            count++;
            
            for (int[] dir : dirs){
                int x = p[0] + dir[0];
                int y = p[1] + dir[1];
                int tot = x * n + y;
                if (x < 0 || x >= m || y < 0 || y >= n || roots[tot] == -1) continue;
                int roottot = findRoot(roots, tot);
                if (root != roottot){
                    roots[root] = roottot; // union two island if they are neighbors. 
                    root = roottot; // update the root to the joined tree root, and find other neightbors. 
                    count--;
                }
            }
            res.add(count);
        }
        return res;
    }
    public int findRoot(int[] roots, int id){
        while (roots[id] != id) id = roots[id];
        return id;
    }
}
