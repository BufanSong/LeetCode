HW6. Binary Search
Date: June 17 2019
Bufan Song
-------------------------------------------------------------------------------------------------------------------------------
BiSearch Templete:
Recursion:
public int biSearch(List<Integer> list, int target){
  int index;
  helper(list, 0, list.length()-1, target);
  return index;
}
public void helper(List<Integer> list, int l, int r, int target){
  if (l >= r){
    if (list.get(l) != target){
    index = -1;
    return;
    }
    else{
      index = l;
      return;
      }
    }
  int mid = l + (r - l)/2;
  if (list.get(mid) == target){
      index = mid;
      return;
      }
  if (list.get(mid) < target){
      helper(list, mid+1, r, target);
    }
  else if(list.get(mid) > target{
      helper(list, l, mid-1, target);
  }
}
-------------------------------------------------------------------------------------------------------------------------------
Iterative: 
public int biSearch(List<Integer> list, int target){
    if (list == null || list.length() == 0)
      return -1;
    if (target < list.get(0) || target > list.get(list.length()-1))
      return -1;
   
    int l = 0, r = list.length()-1;
    while (l < r-1){
      int mid = l + (r-l)/2;
      if (list.get(mid) == target)
          return mid;
      else if (list.get(mid) < target)
          l = mid + 1;
      else
          r = mid - 1;
    }
    if (list.get(l) == target)
        return l;
    if (list.get(r) == target)
        return r;
    return -1;
}

-------------------------------------------------------------------------------------------------------------------------------
35. Search Insert Position
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.
-------------------------------------------------------------------------------------------------------------------------------
class Solution {
    int index;
    public int searchInsert(int[] nums, int target) {
        helper(nums, 0, nums.length -1, target);
        return index;
    }
    public void helper(int[] nums, int l, int r, int target){
        if (l >= r){
            if (nums[l] >= target){
                index = l;
                return;
            }
            else if (nums[l] < target){
                index = l+1;
                return;
            }
        }
        int mid = l + (r - l)/2;
        if (nums[mid] == target){
                index = mid;
                return;
            }
        if (nums[mid] < target){
              helper(nums, mid + 1, r, target);
         }
        else if(nums[mid] > target){
              helper(nums, l, mid-1, target);
         }
    }
}
-------------------------------------------------------------------------------------------------------------------------------
Iterative:
class Solution {
    int index;
    public int searchInsert(int[] nums, int target) {
        if (nums == null || nums.length == 0)
          return -1;
        int l = 0, r = nums.length -1;
        while (l <= r){
          int mid = l + (r-l)/2;
          if (nums[mid] == target)
              return mid;
          else if (nums[mid] < target)
              l = mid + 1;
          else
              r = mid - 1;
        }
        return l;
    }
}
-------------------------------------------------------------------------------------------------------------------------------
162. Find Peak Element
A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.
-------------------------------------------------------------------------------------------------------------------------------
Thoughts: 
1. Initial thoughts, go through the array, but the time complexity is O(n). 
2. O(log) time complexity, use binary search. find mid, and compare mid with mid+1, if it is acsending, then there must be one
peak at the right side of mid, so search range become mid+1 to r. If it is decsending, then search left side due to peak mush
lie at the left side(include mid), so search l to mid. When l and r are equal, return the index which is the peak. 
-------------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int findPeakElement(int[] nums) {
        if (nums == null || nums.length == 0)
            return -1;
        return biSearch(nums, 0, nums.length - 1);
        
    }
    public int biSearch (int[] nums, int l, int r){
        if (l == r)
            return l;
        int mid = l + (r-l)/2;
        if (nums[mid] < nums[mid+1])
            return biSearch(nums, mid+1, r);
        
        return biSearch(nums, l, mid);
    }
}
-------------------------------------------------------------------------------------------------------------------------------
153. Find Minimum in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
-------------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int findMin(int[] nums) {
        int l = 0, r = nums.length-1;
        if (nums[0] < nums[r]){ // first check if the array is rotated or not, if not, then return the first value. 
            return nums[0];
        }
        while (l +1 < r){
            int mid = l + (r-l)/2;
            if (nums[mid] > nums[mid + 1]) // found the pivot point, which is mid, so return pivot +1
                return nums[mid+1];
            else if (nums[mid] < nums[mid + 1] && nums[mid] > nums[0]) // if mid is smaller than mid+1, and mid greater than first,
            // then pivot point is on the right side of mid+1 point. 
                l = mid +1;
            else if (nums[mid] < nums[mid + 1] && nums[mid] < nums[0]) // if mid is smaller than mid + 1, and mid is smaller than 
            //first, then the smallest point is on the left side of mid point, make right = mid. 
                r = mid;
        }
        if (nums[l] < nums[r])// the smallest point has to be aither left or right, compare them and return the small one. 
            return nums[l];
        return nums[r];
    }
}
-------------------------------------------------------------------------------------------------------------------------------
154. Find Minimum in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.
-------------------------------------------------------------------------------------------------------------------------------
Thoughts: The duplicates would affect the run-time complexity, and is from logn to n. Cause if there are large amount of duplicate
numbers in the array, we have to go through all the duplicates to find the first pivot point. 
-------------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int findMin(int[] nums) {
        int l = 0, r = nums.length - 1;
        while ( l < r){
            int mid = l + (r-l)/2;
            if (nums[mid] > nums[r]) // if mid index value is larger than right index value, means the pivot is at the right side
            // of mid, so mid+1;
                l = mid + 1;
            else if (nums[mid] < nums[r]) // if the mid index value is smaller than right index, which means the pivot index is at
            // the left side of the mid, include mid, so change the right search range to mid.  
                r = mid;
            else{  // if the mid is equal to nums[r], means there are duplicates, and right index shrink if nums[r] still larger 
            // or equal to nums[r-1]. 
                if (r != 0 && nums[r] >= nums[r-1])
                    r--;
                else{
                    return nums[r];
                }
            }
        }
        return nums[l];
    }
}
