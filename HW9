HW9 Dynamic Programming 2
Date: June 24 2019
Bufan Song
-----------------------------------------------------------------------------------------------------------------------------
Warm Up: 
72. Edit Distance
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:
Insert a character
Delete a character
Replace a character
Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
-----------------------------------------------------------------------------------------------------------------------------
Thoughts:
for word1 with length m, and word2 with length n. Create a 2d dp[m+1][n+1] array to store the min cost of replace, insert and delate.
For the first row and first col, set the cost with cur col and row index, which assume every character needs to aither replace
insert or delete. 
The core idea is, when we go through the dp 2d array in two for loop, the cost of character i in word1 convert to character
j in word2, cost[i+1][j+1] (here due to we add one index for each of row and col, so it is i+1 and j+1)has two cases. 
First case is when the i in word1 and j in word2 are equal, then the cost is equal to i-1 and j-1 in cost array. 
Second case is when the i in word1 and j in word 2 are different, then three operations. 
1st operation, replace, then cost[i][j] = cost[i-1][j-1]+1 -> cost[i+1][j+1] = cost[i][j] +1.
2nd operation, insert, then cost[i][j] = cost[i][j-1] +1 -> cost[i+1][j+1] = cost[i+1][j] + 1;
3nd operation, delete, then cost[i][j] = cost[i-1][j] + 1 -> cost[i+1][j+1] = cost[i][j+1] + 1;
Find the minimum cost from these three operations. 
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int[][] cost = new int[m+1][n+1]; 
        for (int i = 0; i <= m; i++){
            cost[i][0] = i;
        }
        for (int j = 0; j <= n; j++){
            cost[0][j] = j;
        }
        
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (word1.charAt(i) == word2.charAt(j))
                    cost[i+1][j+1] = cost[i][j];
                else{
                    int replace = cost[i][j];
                    int delete = cost[i][j+1];
                    int insert = cost[i+1][j];
                    cost[i+1][j+1] = Math.min(replace, Math.min(insert, delete))+1;
                }
            }
        }
        return cost[m][n];  
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Q1:
91. Decode Ways
A message containing letters from A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.
Example 1:
Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
-----------------------------------------------------------------------------------------------------------------------------
Thoughts:
Conside the string has only length 1, then res = 1. When the length larger than 1, need to consider two cases, one is if 
the current index satisfy the range 1-9 for a valid digit, and second is if the previous index + current index satisfy the 
range of 10-26 for a valid digit. 
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int numDecodings(String s) {
        int[] dp = new int[s.length()];
        
        dp[0] = s.charAt(0) != '0' ? 1 : 0; 
        
        for (int i = 1; i < s.length(); i++){
            int first = s.charAt(i) - '0';
            int second = Integer.valueOf(s.substring(i - 1, i + 1));
            if (first >= 1 && first <= 9){
                dp[i] += dp[i-1];
            }
            if (second >= 10 && second <= 26){
                dp[i] += i>= 2 ? dp[i-2] : 1;
            }
        }
        return dp[s.length() - 1];
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Q2:
312. Burst Balloons
Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:
You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int maxCoins(int[] nums) {
        int len = nums.length; 
        int[] new_nums = new int[len + 2];
        
        for (int i = 0; i < nums.length; i++)
            new_nums[i+1] = nums[i];
        new_nums[0] = new_nums[len+1] = 1; // build the left and right boundary, 1.
        
        int[][] memo = new int[len + 2][len + 2];
        return dp(memo, new_nums, 0, len+1);
    }
    public int dp (int[][] memo, int[] nums, int left, int right){
        if (left + 1 == right)
            return 0;
        
        if (memo[left][right] > 0 )
            return memo[left][right];
        
        int ans = 0;
        for (int i = left + 1; i < right; i++){
            ans = Math.max(ans, nums[left] * nums[i] * nums[right] + dp(memo, nums, left, i) + dp(memo, nums, i, right));
        }
        memo[left][right] = ans;
        return ans;
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Q3:
44. Wildcard Matching
Links: https://leetcode.com/problems/wildcard-matching/
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public boolean isMatch(String s, String p) {
        int m=s.length(), n=p.length();
        boolean[][] dp = new boolean[m+1][n+1];
        dp[0][0] = true; //empty string to empty pattern, so true
        for (int i=1; i<=m; i++) {
            dp[i][0] = false; // non-empty string compare to empty pattern, so false
        }

        for(int j=1; j<=n; j++) {
            if(p.charAt(j-1)=='*'){ // unless it starts with *, set empty string with 
                // pattern[j] = true, otherwise all false
                dp[0][j] = true;
            } else {
                break;
            }
        }

        for(int i=1; i<=m; i++) { 
            for(int j=1; j<=n; j++) {
                if (p.charAt(j-1)!='*') { 
                    // depend on previous string versus pattern and current character 
                    // in string and pattern, if they equal or pattern character 
                    // equals to ?, then output true, otherwise false
                    dp[i][j] = dp[i-1][j-1] && (s.charAt(i-1)==p.charAt(j-1) || p.charAt(j-1)=='?');
                } else {
                    // if the character in pattern is *, then it can be emptry sequence dp[i][j-1] or match the current charater in string, so output the value in
                    // aither dp[i-1][j] || dp[i][j-1]
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
            }
        }
        return dp[m][n];
    }
}

-----------------------------------------------------------------------------------------------------------------------------
Q4:
568. Maximum Vacation Days
Link: https://leetcode.com/problems/maximum-vacation-days/
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int maxVacationDays(int[][] flights, int[][] days) {
        // corner cases
        if (flights == null || flights.length == 0 || days == null || days.length == 0 || days[0].length == 0 || flights[0].length == 0)
            return 0; 
        int city = days.length;
        int week = days[0].length;
        int[][] dp = new int[city][week];
        for (int[] dpRow : dp)
            Arrays.fill(dpRow, -1);
        dp[0][0] = days[0][0]; // week 1 in city 0 as default, it is certian
        for (int i = 0; i < city; i++){
            if (flights[0][i] == 1) // if city 0 to other city has flight (1)
                dp[i][0] = days[i][0];
        }
        // current week only depend on previous week, so start from 1 to the end week
        // the largest days for the dest city in k week is depend on k-1 week from 
        // the largest day value saved in dp[depart][k-1], save the max one. 
        for (int k = 1; k < week; k++){
            for (int dest = 0; dest < city; dest++){ 
                for (int depart = 0; depart < city; depart++){ 
                    // the depart city only can reach the dest city when the depart
                    // city has flight to dest city, or stay at the same city
                    if (dp[depart][k - 1] != -1 && (flights[depart][dest] == 1 || depart == dest)){
                        dp[dest][k] = Math.max(dp[dest][k], dp[depart][k-1] + days[dest][k]); 
                    }
                }
            }
        }
        // find the largest day value from the citys in final week 
        int res = 0;
        for (int i = 0; i < city; i++){
            if (dp[i][week-1] > res)
                res = dp[i][week-1];
        }
        return res;
    }
}

