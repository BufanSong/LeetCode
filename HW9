HW9 Dynamic Programming 2
Date: June 24 2019
Bufan Song
-----------------------------------------------------------------------------------------------------------------------------
Warm Up: 
72. Edit Distance
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:
Insert a character
Delete a character
Replace a character
Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int[][] cost = new int[m+1][n+1];
        for (int i = 0; i <= m; i++){
            cost[i][0] = i;
        }
        for (int j = 0; j <= n; j++){
            cost[0][j] = j;
        }
        
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (word1.charAt(i) == word2.charAt(j))
                    cost[i+1][j+1] = cost[i][j];
                else{
                    int replace = cost[i][j];
                    int insert = cost[i][j+1];
                    int delete = cost[i+1][j];
                    cost[i+1][j+1] = Math.min(replace, Math.min(insert, delete))+1;
                }
            }
        }
        return cost[m][n];
        
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Q2:
91. Decode Ways
A message containing letters from A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.
Example 1:
Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
-----------------------------------------------------------------------------------------------------------------------------
Thoughts:
Conside the string has only length 1, then res = 1. When the length larger than 1, need to consider two cases, one is if 
the current index satisfy the range 1-9 for a valid digit, and second is if the previous index + current index satisfy the 
range of 10-26 for a valid digit. 
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int numDecodings(String s) {
        int[] dp = new int[s.length()];
        
        dp[0] = s.charAt(0) != '0' ? 1 : 0; 
        
        for (int i = 1; i < s.length(); i++){
            int first = s.charAt(i) - '0';
            int second = Integer.valueOf(s.substring(i - 1, i + 1));
            if (first >= 1 && first <= 9){
                dp[i] += dp[i-1];
            }
            if (second >= 10 && second <= 26){
                dp[i] += i>= 2 ? dp[i-2] : 1;
            }
        }
        return dp[s.length() - 1];
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Q3:
312. Burst Balloons
Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:
You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
-----------------------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int maxCoins(int[] nums) {
        int len = nums.length; 
        int[] new_nums = new int[len + 2];
        
        for (int i = 0; i < nums.length; i++)
            new_nums[i+1] = nums[i];
        new_nums[0] = new_nums[len+1] = 1; // build the left and right boundary, 1.
        
        int[][] memo = new int[len + 2][len + 2];
        return dp(memo, new_nums, 0, len+1);
    }
    public int dp (int[][] memo, int[] nums, int left, int right){
        if (left + 1 == right)
            return 0;
        
        if (memo[left][right] > 0 )
            return memo[left][right];
        
        int ans = 0;
        for (int i = left + 1; i < right; i++){
            ans = Math.max(ans, nums[left] * nums[i] * nums[right] + dp(memo, nums, left, i) + dp(memo, nums, i, right));
        }
        memo[left][right] = ans;
        return ans;
    }
}


