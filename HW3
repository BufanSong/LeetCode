HW3. Sliding Window
Date: June 06 2019
----------------------------------------------------------------------------------------------------------------
Q1: 
----------------------------------------------------------------------------------------------------------------
76. Minimum Window Substring 
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:
Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"

Note:
If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.
----------------------------------------------------------------------------------------------------------------
Thought: Use two pointers, first the right side of window go right, until they satisfy all the T, then go through loop of left side of window, 
slide the left pointer to right, if the codition no longer satisfied, then out of the loop and keep looking the right sides. 
Always keep a variable to record the minimum left side index, and minimum length of the window. 
----------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null)
            return "";
        Map<Character, Integer> map = new HashMap<>();
        int left = 0; 
        int minLeft = 0;
        int minLength = s.length()+1;
        int count = 0;
        
        for (int i = 0; i < t.length(); i++){
            if (map.containsKey(t.charAt(i))){
                map.put(t.charAt(i), map.get(t.charAt(i))+1);
            }
            else{
                map.put(t.charAt(i), 1);
            }
        }
        
        for (int right = 0; right < s.length(); right++){
            if (map.containsKey(s.charAt(right))){
                map.put(s.charAt(right), map.get(s.charAt(right))-1);
                if (map.get(s.charAt(right)) >= 0)
                    count++;
            }
            while (count == t.length()){
                if (right - left + 1 < minLength){
                    minLength = right - left + 1;
                    minLeft = left;
                }
                if (map.containsKey(s.charAt(left))){
                    map.put(s.charAt(left), map.get(s.charAt(left)) + 1);
                    if (map.get(s.charAt(left)) > 0){
                        count--;
                    }
                }
                left++;
            }
        }
        if (minLength > s.length())
            return "";
        return s.substring(minLeft, minLeft + minLength);
    }
}


