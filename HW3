HW3. Sliding Window
Date: June 06 2019
----------------------------------------------------------------------------------------------------------------
Q1: 
----------------------------------------------------------------------------------------------------------------
76. Minimum Window Substring 
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:
Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"

Note:
If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.
----------------------------------------------------------------------------------------------------------------
Thought: Use two pointers, first the right side of window go right, until they satisfy all the T, then go through loop of left side of window, 
slide the left pointer to right, if the codition no longer satisfied, then out of the loop and keep looking the right sides. 
Always keep a variable to record the minimum left side index, and minimum length of the window. 
----------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null)
            return "";
        Map<Character, Integer> map = new HashMap<>();
        int left = 0; 
        int minLeft = 0;
        int minLength = s.length()+1;
        int count = 0;
        
        for (int i = 0; i < t.length(); i++){
            if (map.containsKey(t.charAt(i))){
                map.put(t.charAt(i), map.get(t.charAt(i))+1);
            }
            else{
                map.put(t.charAt(i), 1);
            }
        }
        
        for (int right = 0; right < s.length(); right++){
            if (map.containsKey(s.charAt(right))){
                map.put(s.charAt(right), map.get(s.charAt(right))-1);
                if (map.get(s.charAt(right)) >= 0)
                    count++;
            }
            while (count == t.length()){
                if (right - left + 1 < minLength){
                    minLength = right - left + 1;
                    minLeft = left;
                }
                if (map.containsKey(s.charAt(left))){
                    map.put(s.charAt(left), map.get(s.charAt(left)) + 1);
                    if (map.get(s.charAt(left)) > 0){
                        count--;
                    }
                }
                left++;
            }
        }
        if (minLength > s.length())
            return "";
        return s.substring(minLeft, minLeft + minLength);
    }
}

----------------------------------------------------------------------------------------------------------------
Q2:
----------------------------------------------------------------------------------------------------------------
340. Longest Substring with At Most K Distinct Characters
Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:
Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:
Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.
----------------------------------------------------------------------------------------------------------------
Thoughts: Similar idea, just keep in mind about the corner case. 
----------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (s == null || s.length() == 0 || k == 0)
            return 0;
        
        if (s.length() <= k)
            return s.length();
        
        Map<Character, Integer> charCountMap = new HashMap<>();
        int maxLen = 1;
        int left = 0;
        for (int right = 0; right < s.length(); right++){
            //map.put(s.charAt(right), map.getOrDefault(s.charAt(right),0)+1);
            if (charCountMap.containsKey(s.charAt(right)))
                charCountMap.put(s.charAt(right), 
                                 charCountMap.get(s.charAt(right)) +1);
            else
                charCountMap.put(s.charAt(right), 1);
            
            while (charCountMap.size() > k && left < right){
                if (charCountMap.containsKey(s.charAt(left))){
                    charCountMap.put(s.charAt(left), 
                                     charCountMap.get(s.charAt(left)) - 1);
                    if (charCountMap.get(s.charAt(left)) == 0)
                        charCountMap.remove(s.charAt(left));
                }
                left++;
            }
            if (charCountMap.size() <= k){
                if (maxLen < (right - left + 1))
                    maxLen = (right - left + 1);
            }
        }
        return maxLen;
    }
}

----------------------------------------------------------------------------------------------------------------
Q3:
----------------------------------------------------------------------------------------------------------------
424. Longest Repeating Character Replacement
Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.

Example 1:
Input:
s = "ABAB", k = 2
Output:
4

Explanation:
Replace the two 'A's with two 'B's or vice versa.
----------------------------------------------------------------------------------------------------------------
Sol:
class Solution {
    public int characterReplacement(String s, int k) {
        int len = s.length();
        int[] repeatCount = new int[26];
        int start = 0, maxCount = 0, maxLength = 0;
        for (int end = 0; end < len; end++) {
            maxCount = Math.max(maxCount, ++repeatCount[s.charAt(end) - 'A']);
            // when the sliding window has more than k characters other than the unique letter, need to shrink the window form left 
            while (end - start + 1 - maxCount > k) {
                repeatCount[s.charAt(start) - 'A']--;
                start++;
            }
            maxLength = Math.max(maxLength, end - start + 1);
        }
        return maxLength;
    }
}
